var documenterSearchIndex = {"docs":
[{"location":"#Verilog-A-Parser-Documentation","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"","category":"section"},{"location":"#Overview","page":"Verilog-A Parser Documentation","title":"Overview","text":"","category":"section"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"This documentation provides guidance on using the Verilog-A Parser. This parser is designed to handle the analog portion of the Verilog-AMS language, which is commonly used for creating analog, and mixed-signal models. For full documentation of the Verilog-A language see verilogams.com.  The parser facilitates the extraction of the Abstract Syntax Tree (AST) from Verilog-A source files, which can be further utilized for analysis, simulation, or conversion purposes.","category":"page"},{"location":"#Installation","page":"Verilog-A Parser Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"Before using the Verilog-A Parser, ensure that the CedarSim package, which includes the VerilogAParser, is installed in your Julia environment. You can install CedarSim using Julia's package manager.","category":"page"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"using Pkg\nPkg.add(\"CedarSim\")","category":"page"},{"location":"#Usage","page":"Verilog-A Parser Documentation","title":"Usage","text":"","category":"section"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"To parse a Verilog-A file and obtain the AST, follow these steps:","category":"page"},{"location":"#Importing-the-Module","page":"Verilog-A Parser Documentation","title":"Importing the Module","text":"","category":"section"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"First, you need to import the CedarSim package, specifically the VerilogAParser module.","category":"page"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"using CedarSim: VerilogAParser","category":"page"},{"location":"#Parsing-a-File","page":"Verilog-A Parser Documentation","title":"Parsing a File","text":"","category":"section"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"To parse a Verilog-A file, use the parsefile function provided by the VerilogAParser. You need to specify the path to your Verilog-A file as an argument to this function.","category":"page"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"ast = VerilogAParser.parsefile(\"path/to/your/verilogA_file.va\")","category":"page"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"This function reads the specified Verilog-A file and parses it to construct the AST.","category":"page"},{"location":"#Example","page":"Verilog-A Parser Documentation","title":"Example","text":"","category":"section"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"Here's a simple example of how to use the Verilog-A Parser to parse a file and print a summary of the AST:","category":"page"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"# Import the necessary module\nusing CedarSim: VerilogAParser\n\n# Specify the path to your Verilog-A file\nfilename = \"example.va\"\n\n# Parse the file to obtain the AST\nast = VerilogAParser.parsefile(filename)\n\n# Print the AST to the console\nprintln(ast)","category":"page"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"This script will output the structure of the AST, which provides insights into the parsed elements of the Verilog-A file.","category":"page"},{"location":"#Conclusion","page":"Verilog-A Parser Documentation","title":"Conclusion","text":"","category":"section"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"The Verilog-A Parser in Julia provides a powerful tool for handling the parsing of analog Verilog-AMS models. By converting Verilog-A code into an AST, users can perform a wide range of tasks from analysis to simulation, enhancing the flexibility and utility of Verilog-A model handling in Julia.","category":"page"},{"location":"","page":"Verilog-A Parser Documentation","title":"Verilog-A Parser Documentation","text":"Please file an issue on our public issue tracker for Verilog-A features that are important to you, but are not yet implemented.","category":"page"}]
}

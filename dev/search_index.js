var documenterSearchIndex = {"docs":
[{"location":"#Introduction-to-the-SpectreNetlistParser","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"When working with netlists or creating EDA workflows, engineers and designers frequently encounter the need to manipulate or analyze circuit designs expressed in netlist files. Spectre and/or SPICE format netlists define the components and connections of a circuit in a text format. The SpectreNetlistParser is a specialized tool designed to parse these netlist files into an Abstract Syntax Tree (AST), transforming raw netlist data into a structured and easily navigable format.","category":"page"},{"location":"#Why-Use-SpectreNetlistParser?","page":"Introduction to the SpectreNetlistParser","title":"Why Use SpectreNetlistParser?","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"The SpectreNetlistParser enhances the efficiency and accuracy of circuit design and simulation processes in several key ways:","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Ease of Use: It automates the conversion of text-based netlist files into ASTs, which accurately represent the hierarchical structure of a circuit, including its components and connectivity.\nAccuracy: The parsed netlist accurately maintains the original netlist structure including all comments and whitespace in a structured format.\nIntegration and Flexibility: The parser seamlessly integrates with Julia, enabling it to be used in a wide range of applications.","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"By using SpectreNetlistParser, users can avoid the error-prone process of manually parsing complex netlist syntax and can directly interact with the structure of the netlist programmatically. This leads to more robust design practices and can significantly speed up the development cycle in electronic design projects.","category":"page"},{"location":"#Getting-Started-with-SpectreNetlistParser","page":"Introduction to the SpectreNetlistParser","title":"Getting Started with SpectreNetlistParser","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"To utilize SpectreNetlistParser in your projects, ensure Julia is installed on your system along with CedarSim. This tool is designed to fit smoothly into any Julia-based project or script where handling Spectre netlist files is required.","category":"page"},{"location":"#Basic-Usage","page":"Introduction to the SpectreNetlistParser","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"The following example illustrates the basic usage of the SpectreNetlistParser:","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"To read in a Spectre format netlist:","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"using CedarSim: SpectreNetlistParser\n# Parse the netlist file\nast = SpectreNetlistParser.parsefile(\"inverter.scs\")\n\n# Now `ast` holds the abstract syntax tree of the netlist","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"or in SPICE format:","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"using CedarSim.SpectreNetlistParser: SPICENetlistParser\n# Parse the netlist file\nast = SPICENetlistParser.parsefile(\"inverter.spice\")\n\n# Now `ast` holds the abstract syntax tree of the netlist","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"In this example, parsefile is a function that reads a netlist file named inverter.scs (or inverter.spice) and parses it into an abstract syntax tree. The ast object can then be used to explore, analyze the circuit described in the netlist.","category":"page"},{"location":"#SPICE-Syntax-Support","page":"Introduction to the SpectreNetlistParser","title":"SPICE Syntax Support","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"SPICE defines the connections between circuit elements, hence the files being referred to as \"netlists\". CedarEDA supports the following syntax elements in SPICE, please file an issue on our public issue tracker for SPICE features that are important to you, but are not yet implemented.","category":"page"},{"location":"#SPICE-Elements","page":"Introduction to the SpectreNetlistParser","title":"SPICE Elements","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Type Element Supported Arguments\nVoltage Source V DC, SIN, PULSE, PWL\nCurrent Source I DC, SIN, PULSE, PWL\nIdeal Resistor R \nIdeal Capacitor C \nIdeal Inductor L \nMOSFET M \nSubcircuit Call X Instance parameter values","category":"page"},{"location":"#SPICE-Commands","page":"Introduction to the SpectreNetlistParser","title":"SPICE Commands","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Supported Commands Example\n.ac .AC DEC 10 fmin fmax\n.dc .NOISE V(vout) v0 0\n.end .end\n.global .global 0\n.include .include \"file.sp\"\n.lib .lib \"models.lib\" tt\n.model .model nmos nmos ...\n.op .op\n.option .option RELTOL=1e-5\n.options .options RELTOL=1e-5\n.param .param c1 = 1p\n.parameter .parameter rl = 10k\n.parameters .parameters a=10 b=12\n.print .print vin vout\n.subckt, .ends .subckt foo n1 n2 n3 x=1 y=10 ...\n.tran .tran 1p 1u","category":"page"},{"location":"#SPICE-Numbers","page":"Introduction to the SpectreNetlistParser","title":"SPICE Numbers","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Numbers in SPICE are case insensitive and support the following scaling suffixes:","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Suffix Scale\nT 10^12\nG 10^9\nMEG 10^6\nk 10^3\nm 10^-3\nmil 25.4u\nu 10^-6\nn 10^-9\np 10^-12\nf 10^-15\na 10^-18","category":"page"},{"location":"#SPICE-Equations","page":"Introduction to the SpectreNetlistParser","title":"SPICE Equations","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"The following mathematical operators are supported:","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Operator Meaning\n+ Addition\n- Subtraction\n* Multiplication\n/ Division\n** Exponent","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"The following mathematical functions are supported:","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Function Description\nmin(x, y) Minimum of x and y\nmax(x, y) Maximum of x and y\nabs(x) Absolute value of x\nlog(x) Logarithm of x to base ℯ\nlog10(x) Logarithm of x to base 10\nsgn(x) Sign of x: x>0 = 1, x<0 = 1, x==0 = 0\nsign(x, y) Magnitude of x with the sign of y: sgn(y)*abs(x)\nexp(x) ℯ^x\npow(x,y) x to the power of y\npwr(x,y) Signed power: sgn(x)*(abs(x)^y)\nsqrt(x) Square root of x\nsinh(x) Hyperbolic sine of x\ncosh(x) Hyperbolic cosine of x\ntanh(x) Hyperbolic tangent of x\nsin(x) Sine of x (in radians)\ncos(x) Cosine of x (in radians)\ntan(x) Tangent of x (in radians)\natan(x) Inverse tangent of x\narctan(x) Inverse tangent of x\nasinh(x) Inverse hyperbolic sine of x\nacosh(x) Inverse hyperbolic cosine of x\natanh(x) Inverse hyperbolic tangent of x\nint(x) Integer portion of x\nnint(x) Round to nearest integer to x\nfloor(x) Integer value less than or equal to x\nceil(x) Integer value greater than or equal to x","category":"page"},{"location":"#Supported-Spectre-Syntax","page":"Introduction to the SpectreNetlistParser","title":"Supported Spectre Syntax","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Spectre refers to the netlist language used by the Spectre Circuit Simulator and is closely related to SPICE. SpectreNetlistParser supports the following syntax elements in Spectre, please file an issue on our public issue tracker for Spectre features that are important to you, but are not yet implemented.","category":"page"},{"location":"#Spectre-Elements","page":"Introduction to the SpectreNetlistParser","title":"Spectre Elements","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Type Spectre Element\nVoltage Source vsource\nCurrent Source isource\nIdeal Resistor resistor\nIdeal Capacitor capactor\nIdeal Inductor inductor\nBehavioral Source bsource","category":"page"},{"location":"#Spectre-Numbers","page":"Introduction to the SpectreNetlistParser","title":"Spectre Numbers","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Numbers in Spectre support the following scaling suffixes:","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Suffix Scale\nT 10^12\nG 10^9\nM 10^6\nK 10^3\nk 10^3\n_ 1\n% 10^-2\nc 10^-2\nm 10^-3\nu 10^-6\nn 10^-9\np 10^-12\nf 10^-15\na 10^-18","category":"page"},{"location":"#Spectre-Equations","page":"Introduction to the SpectreNetlistParser","title":"Spectre Equations","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"The following mathematical operators are supported:","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Operator Meaning\n+ Addition\n- Subtraction\n* Multiplication\n/ Division\n^ Exponentiation\n! Boolean not\n== Boolean equal\n!= Boolean not equal\n> Greater than\n< Less than\n<= Less than or equal\n>= Greater than or equal","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"The following mathematical functions are supported","category":"page"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Function Description\nmax(x, y) Maximum of x and y\nmin(x, y) Minimum of x and y\nabs(x) Absolute value of x\nln(x) Logarithm of x to base ℯ\nlog(x) Logarithm of x to base ℯ\nlog10(x) Logarithm of x to base 10\nexp(x) ℯ^x\npow(x,y) x to the power of y\nsqrt(x) Square root of x\nsinh(x) Hyperbolic sine of x\ncosh(x) Hyperbolic cosine of x\ntanh(x) Hyperbolic tangent of x\nsin(x) Sine of x (in radians)\ncos(x) Cosine of x (in radians)\ntan(x) Tangent of x (in radians)\natan(x) Inverse tangent of x\narctan(x) Inverse tangent of x\nasinh(x) Inverse hyperbolic sine of x\nacosh(x) Inverse hyperbolic cosine of x\natanh(x) Inverse hyperbolic tangent of x\nint(x) Integer value less than or equal to x\nfloor(x) Integer value less than or equal to x\nceil(x) Integer value greater than or equal to x","category":"page"},{"location":"#Spectre-Commands","page":"Introduction to the SpectreNetlistParser","title":"Spectre Commands","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"Supported Commands Example\nahdl_include ahdl_include \"opamp.va\"\ndc dcOp dc write=\"spectre.dc\"\nglobal global 0\ninclude include \"inverter.scs\"\ninfo finalTimeOP info what=oppoint where=rawfile\ninline subckt inline subckt pfet (d g s x) ...\nmodel model mnfet bsimcmg type=n ...\nnoise noise noise start=10Hz stop=10M dec=1k\noptions saveOptions options save=allpub\nparameters parameters rl=10k freq=1M\npnoise pnoise pnoise start=10Hz stop=10M dec=1k\npss pss pss fund=100k maxacfreq=4M\nsp sp sp ports=[PORT0] start=1G stop=9G lin=101\nsubckt, ends subckt dff A CLK OUT VCC ...\nsave save VOUT\ntran tran tran stop=1u start=0 step=1p","category":"page"},{"location":"#Conclusion","page":"Introduction to the SpectreNetlistParser","title":"Conclusion","text":"","category":"section"},{"location":"","page":"Introduction to the SpectreNetlistParser","title":"Introduction to the SpectreNetlistParser","text":"The SpectreNetlistParser provides a powerful, efficient way to handle Spectre netlists, transforming them from simple text files into structured, programmatically manageable data. This capability is crucial for accelerating development cycles and enhancing the accuracy and flexibility of circuit design and analysis. Whether for basic modifications, in-depth analyses, or comprehensive reporting, SpectreNetlistParser is an essential tool in the electronic design automation toolkit.","category":"page"}]
}
